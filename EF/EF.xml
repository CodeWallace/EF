<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EF</name>
    </assembly>
    <members>
        <member name="F:EF.Config.Configs.isEditor">
            <summary>
            是否编辑器模式下
            </summary>
        </member>
        <member name="P:EF.Config.Configs.ClientVersion">
            <summary>
            本地客户端版本号 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.IsRemote">
            <summary>
            是否远程版本 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.IsDebugMode">
            <summary>
            是否调试模式 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.LocalLua">
            <summary>
            是否使用本地lua Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.Channel">
            <summary>
            渠道号 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.AccessUrl">
            <summary>
            接入服务器地址 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.OS">
            <summary>
            平台 Resource/Config.txt
            </summary>
        </member>
        <member name="P:EF.Config.Configs.ResourceUrl">
            <summary>
            Resource目录绝对路径
            </summary>
        </member>
        <member name="P:EF.Config.Configs.PlatformName">
            <summary>
            平台名称 win、android、ios
            </summary>
        </member>
        <member name="P:EF.Config.Configs.Platform">
            <summary>
            平台枚举
            </summary>
        </member>
        <member name="M:EF.Config.Configs.SetPlatform(System.Int32)">
            <summary>
            游戏初始化时 设置平台 
            0 UNITY_STANDALONE 
            1 UNITY_ANDROID 
            2 UNITY_IPHONE
            </summary>
        </member>
        <member name="F:EF.Config.Configs.RemoteClientVersion">
            <summary>
            远端当前客户端版本号
            </summary>
        </member>
        <member name="F:EF.Config.Configs.ResServerUrl">
            <summary>
            资源服务器地址根目录
            </summary>
        </member>
        <member name="F:EF.Config.Configs.HttpServerUrl">
            <summary>
            Http服务器地址
            </summary>
        </member>
        <member name="P:EF.Config.Configs.LocalVersionFileUrl">
            <summary>
            持久化目录下 资源版本文件路径(version.txt)
            </summary>
        </member>
        <member name="P:EF.Config.Configs.persistentDataPath">
            <summary>
            持久化目录
            </summary>
        </member>
        <member name="F:EF.Config.Configs.RemoteVersionFileUrl">
            <summary>
            远程版本文件路径
            </summary>
        </member>
        <member name="T:EF.Event.EventSystem">
            <summary>
            事件系统 在事件的触发时刻向事件系统发送事件(Send方法)，在接收时刻执行事件(Invoke方法)
            </summary>
        </member>
        <member name="M:EF.Event.EventSystem.Send(System.String,EF.Event.Callback)">
            <summary>
            向事件系统发送事件
            </summary>
            <param name="key"></param>
            <param name="callback"></param>
        </member>
        <member name="M:EF.Event.EventSystem.Invoke(System.String)">
            <summary>
            执行事件并移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EF.Event.EventSystem.Remove(System.String)">
            <summary>
            移除事件
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EF.Event.EventSystem.Contains(System.String)">
            <summary>
            是否包含事件
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Event.EventSystem.Dispose">
            <summary>
            释放事件系统
            </summary>
        </member>
        <member name="M:EF.Loader.ABCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Loader.BytesCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:EF.Loader.PoolManager">
            <summary>
            对象池
            </summary>
        </member>
        <member name="M:EF.Loader.PoolManager.GetPool(System.String)">
            <summary>
            取得一个对象池 若没有则自动创建
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Loader.ResourceCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Loader.UnityWebRequestCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Loader.WWWCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:EF.Loader.GOLoader">
            <summary>
            GameObject加载器
            </summary>
        </member>
        <member name="M:EF.Loader.GOLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.Object})">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或远程目录下载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.GOLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.Object},EF.Event.Callback)">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或远程目录下载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.GOLoader.LoadFromResources(System.String,EF.Event.Callback{UnityEngine.Object},EF.Event.Callback)">
            <summary>
            从Resources目录异步加载prefab
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.GOLoader.LoadFromRemote(System.String,EF.Event.Callback{UnityEngine.Object},EF.Event.Callback)">
            <summary>
            从持久化目录异步加载ab
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.GOLoader.Dispose(System.String)">
            <summary>
            卸载资源，或打断正在加载的任务
            </summary>
            <param name="guid">任务GUID</param>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpGetAsync(System.String,System.Int32,System.Int32,EF.Event.Callback{UnityEngine.Networking.UnityWebRequest})">
            <summary>
            HttpGet请求 默认根目录为Configs.ResServerUrl
            </summary>
            <param name="path">相对路径</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="onSuccessed">成功回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpGetAsync(System.String,System.Int32,System.Int32,EF.Event.Callback{UnityEngine.Networking.UnityWebRequest},EF.Event.Callback)">
            <summary>
            HttpGet请求 默认根目录为Configs.ResServerUrl
            </summary>
            <param name="path">相对路径</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpGetAsync(EF.Loader.DirInfo,System.Int32,System.Int32,EF.Event.Callback{UnityEngine.Networking.UnityWebRequest},EF.Event.Callback)">
            <summary>
            HttpGet请求
            </summary>
            <param name="dirInfo">路径信息</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpPostAsync(System.String,System.Int32,System.Int32,System.Byte[],EF.Event.Callback{UnityEngine.Networking.UnityWebRequest})">
            <summary>
            HttpPost请求 默认根目录为Configs.ResServerUrl
            </summary>
            <param name="path">相对路径</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="data">data</param>
            <param name="onSuccessed">成功回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpPostAsync(System.String,System.Int32,System.Int32,System.Byte[],EF.Event.Callback{UnityEngine.Networking.UnityWebRequest},EF.Event.Callback)">
            <summary>
            HttpPost请求 默认根目录为Configs.ResServerUrl
            </summary>
            <param name="path">相对路径</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="data">data</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.HttpPostAsync(EF.Loader.DirInfo,System.Int32,System.Int32,System.Byte[],EF.Event.Callback{UnityEngine.Networking.UnityWebRequest},EF.Event.Callback)">
            <summary>
            HttpPost请求 默认根目录为Configs.ResServerUrl
            </summary>
            <param name="dirInfo">路径信息</param>
            <param name="timeout">超时</param>
            <param name="tryCount">重试次数 -1代表无限重试</param>
            <param name="data">data</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.HttpLoader.Dispose(System.String)">
            <summary>
            卸载资源，或打断正在加载的任务
            </summary>
            <param name="guid">任务GUID</param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.PopLoader">
            <summary>
            弹出任务
            </summary>
        </member>
        <member name="M:EF.Loader.LoaderProxy.PopDuplicateLoader">
            <summary>
            从重复任务中弹出
            </summary>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,System.Byte[])">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,UnityEngine.WWW)">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="www"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,UnityEngine.Networking.UnityWebRequest)">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="www"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,UnityEngine.AssetBundle)">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="ab"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,UnityEngine.Object)">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.DuplicateComplete(System.String,UnityEngine.Texture2D)">
            <summary>
            处理重复任务
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.AddLoaderOnCompleteEvent(EF.Loader.ResLoader)">
            <summary>
            添加OnComplete事件 事件中移除自身，处理重复任务
            </summary>
            <param name="loader"></param>
        </member>
        <member name="M:EF.Loader.LoaderProxy.AddLoaderOnDisposeEvent(EF.Loader.ResLoader)">
            <summary>
            添加OnDispose事件 事件中移除代理中的Loader
            </summary>
            <param name="loader"></param>
        </member>
        <member name="M:EF.Loader.SpriteLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.Sprite})">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或持久化目录下加载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.SpriteLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.Sprite},EF.Event.Callback)">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或持久化目录下加载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.SpriteLoader.LoadFromResources(System.String,EF.Event.Callback{UnityEngine.Sprite},EF.Event.Callback)">
            <summary>
            从Resources目录异步加载Sprite
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.SpriteLoader.LoadFromRemote(System.String,EF.Event.Callback{UnityEngine.Sprite},EF.Event.Callback)">
            <summary>
            从持久化目录异步加载Sprite
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <returns>GUID</returns>
        </member>
        <member name="M:EF.Loader.SpriteLoader.Dispose(System.String)">
            <summary>
            卸载资源，或打断正在加载的任务
            </summary>
            <param name="guid">任务GUID</param>
        </member>
        <member name="T:EF.Loader.TextLoader">
            <summary>
            文本加载器
            </summary>
        </member>
        <member name="M:EF.Loader.TextLoader.LoadAsync(System.String,EF.Event.Callback{System.String})">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或远程目录下载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <return>GUID</return>
        </member>
        <member name="M:EF.Loader.TextLoader.LoadAsync(System.String,EF.Event.Callback{System.String},EF.Event.Callback)">
            <summary>
            异步加载 根据Configs.IsRemote自动选择 从Resources或远程目录下载
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <return>GUID</return>
        </member>
        <member name="M:EF.Loader.TextLoader.LoadFromResources(System.String,EF.Event.Callback{System.String},EF.Event.Callback)">
            <summary>
            从Resources目录异步加载资源
            </summary>
            <param name="path">Resources下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <return>GUID</return>
        </member>
        <member name="M:EF.Loader.TextLoader.LoadFromRemote(System.String,EF.Event.Callback{System.String},EF.Event.Callback)">
            <summary>
            从持久化目录异步加载文本
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
            <return>GUID</return>
        </member>
        <member name="M:EF.Loader.TextLoader.Dispose(System.String)">
            <summary>
            卸载资源，或打断正在加载的任务
            </summary>
            <param name="guid">任务GUID</param>
        </member>
        <member name="T:EF.Loader.WWWLoader">
            <summary>
            WWW加载器
            </summary>
        </member>
        <member name="M:EF.Loader.WWWLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.WWW})">
            <summary>
            WWW异步加载 
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
        </member>
        <member name="M:EF.Loader.WWWLoader.LoadAsync(System.String,EF.Event.Callback{UnityEngine.WWW},EF.Event.Callback)">
            <summary>
            WWW异步加载 
            </summary>
            <param name="path">Resource下相对路径</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
        </member>
        <member name="M:EF.Loader.WWWLoader.LoadAsync(EF.Loader.DirInfo,EF.Event.Callback{UnityEngine.WWW},EF.Event.Callback)">
            <summary>
            WWW异步加载 
            </summary>
            <param name="dirInfo">路径信息</param>
            <param name="onSuccessed">成功回调</param>
            <param name="onFailed">失败回调</param>
        </member>
        <member name="M:EF.Loader.WWWLoader.LoadAsync(EF.Loader.DirInfo,EF.Event.Callback{UnityEngine.WWW})">
            <summary>
            WWW异步加载 
            </summary>
            <param name="dirInfo">路径信息</param>
            <param name="onSuccessed">成功回调</param>
            <returns></returns>
        </member>
        <member name="M:EF.Loader.WWWLoader.Dispose(System.String)">
            <summary>
            卸载资源，或打断正在加载的任务
            </summary>
            <param name="guid">任务GUID</param>
        </member>
        <member name="T:EF.Setting.Converter">
            <summary>
            单元格数据转换
            </summary>
        </member>
        <member name="M:EF.UI.UIBase.CreateUI(EF.Event.Callback)">
            <summary>
            创建UI
            </summary>
            <param name="index">ui当前索引</param>
            <param name="call">回调函数</param>
        </member>
        <member name="T:EF.UI.UIBaseLayerProxy">
            <summary>
            ui基础层代理
            </summary>
        </member>
        <member name="T:EF.UI.UIOverLayerProxy">
            <summary>
            ui弹出框层代理
            </summary>
        </member>
        <member name="T:EF.UI.UIGuideLayerProxy">
            <summary>
            ui引导层代理
            </summary>
        </member>
        <member name="T:EF.UI.UIProxy">
            <summary>
            ui队列代理
            </summary>
        </member>
        <member name="M:EF.UI.UIProxy.AddUI(EF.UI.UIBase)">
            <summary>
            添加UI数据
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:EF.UI.UIProxy.NavTo(System.String)">
            <summary>
            导航到下一个UI
            </summary>
            <param name="uiName"></param>
        </member>
        <member name="M:EF.UI.UIProxy.NavBack">
            <summary>
            导航到上一个UI
            </summary>
        </member>
        <member name="M:EF.UI.UIProxy.Destroy(System.String)">
            <summary>
            销毁一个UI 并重置最上层UI层级 （触发SetSortingOrder方法）
            </summary>
            <param name="uiName">UI名称</param>
        </member>
        <member name="T:EF.Utils.Binary">
            <summary>
            二进制数据读写
            </summary>
        </member>
        <member name="P:EF.Utils.Binary.Position">
            <summary>
            当前数据 读取到的下标位置
            </summary>
        </member>
        <member name="P:EF.Utils.Binary.Length">
            <summary>
            消息的长度
            </summary>
        </member>
        <member name="P:EF.Utils.Binary.Readable">
            <summary>
            当前是否还有数据可以读取
            </summary>
        </member>
        <member name="M:EF.Utils.BinaryConverter.ToTexture2D(System.Byte[])">
            <summary>
             bytes 转 Texture2D
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.BinaryConverter.ToImage(UnityEngine.Texture2D)">
            <summary>
            Texture2D 转 Sprite
            </summary>
        </member>
        <member name="M:EF.Utils.BinaryConverter.ToString(System.Byte[])">
            <summary>
            Bytes 转 String UTF8
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.EncryptDES(System.String,System.String)">
            <summary>
             DES加密字符串
             </summary>
            <param name = "encryptString" > 待加密的字符串 </param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.EncryptDES(System.String)">
            <summary>
            DES加密重构
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
             <param name = "decryptString" > 待解密的字符串 </param >
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.DecryptDES(System.String)">
            <summary>
            DES解密重构
            </summary>
            <param name="decryptString"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.GetMD5_32(System.String,System.String)">
            <summary>
            MD5不可逆加密 32位加密
            </summary>
            <param name="s"></param>
            <param name="_input_charset"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.GetMd5_16(System.String)">
            <summary>
            16位加密
            </summary>
            <param name="ConvertString"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.EncryptUtil.Encypt(System.Byte[]@)">
            <summary>
            二进制加密函数，更简单的方法还有在最后一位增加一个字符使Disunity解析文件失败等。  
            </summary>
            <param name="targetData"></param>
        </member>
        <member name="M:EF.Utils.FileUtil.TrimStart(System.String)">
            <summary>
            去除路径前导 '/' '\'
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.AddFile3Preamble(System.String)">
            <summary>
            添加路径前导 'file:///'
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.AddFile2Preamble(System.String)">
            <summary>
            添加路径前导 'file://'
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.Pack(System.String,EF.Event.VoidDelegate{System.String})">
            <summary>
            遍历src下所有文件 
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.Pack(System.String,EF.Event.VoidDelegate{System.IO.FileSystemInfo},EF.Event.BoolDelegate{System.IO.FileSystemInfo})">
            <summary>
            遍历source下所有文件 
            </summary>
            <param name="source">路径</param>
            <param name="call">递归每个文件时调用</param>
            <param name="condition">注入条件 满足条件则递归</param>
        </member>
        <member name="M:EF.Utils.FileUtil.CheckFolder(System.String)">
            <summary>
            检查文件路径上一层文件夹是否存在 不存在则创建
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.CreatFolder(System.String)">
            <summary>
            检查文件夹 存不存在 不存在创建
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.CopyFolder(System.String,System.String)">
            <summary>
            src文件夹复制到des文件夹
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.CopyFolder(System.String,System.String,EF.Event.BoolDelegate{System.String})">
            <summary>
            src文件夹复制到des del为false则复制
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.CopyFile(System.String,System.String)">
            <summary>
            src文件复制到des
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.PasteFile(System.String,System.Byte[])">
            <summary>
            粘贴文件
            </summary>
            <param name="des"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:EF.Utils.FileUtil.RenameFile(System.String,System.String)">
            <summary>
            文件重命名 本质是复制文件 再删除原文件
            </summary>
            <param name="des"></param>
            <param name="src"></param>
        </member>
        <member name="M:EF.Utils.FileUtil.ShearFolder(System.String,System.String)">
            <summary>
            剪切文件到目录
            </summary>
            <param name="des"></param>
            <param name="src"></param>
        </member>
        <member name="M:EF.Utils.FileUtil.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.DeleteFolderFiles(System.String)">
            <summary>
            清空指定的文件夹，但不删除文件夹
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:EF.Utils.FileUtil.CreatText(System.String,System.String)">
            <summary>
            创建文本文件
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.LoadFile(System.String)">
            <summary>
            尝试读取文件二进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.FileUtil.GenerateGUID">
            <summary>
            生成短Guid
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.GenHash(System.Byte[])">
            <summary>
            sha1算法生成文件hash 
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.ByteToKb(System.Single)">
            <summary>
            b转kb
            </summary>
        </member>
        <member name="M:EF.Utils.FileUtil.ByteToMb(System.Single)">
            <summary>
            b转MB
            </summary>
        </member>
        <member name="M:EF.Utils.HttpUtil.HttpGetRequest(System.String,EF.Event.Callback{UnityEngine.Networking.UnityWebRequest})">
            <summary>
            HttpGet请求 无论成功失败都会回调
            </summary>
            <param name="url">地址</param>
            <param name="callback(long,string)(long,string)">long responseCode string msg</param>
            <returns>coroutineId</returns>
        </member>
        <member name="M:EF.Utils.HttpUtil.HttpPostRequest(System.String,System.Byte[],EF.Event.Callback{System.Int64,System.String})">
            <summary>
            HttpPost请求 无论成功失败都会回调
            </summary>
            <param name="url">地址</param>
            <param name="byetes">数据</param>
            <param name="callback(long,string)(long,string)">long responseCode string msg</param>
            <returns>coroutineId</returns>
        </member>
        <member name="M:EF.Utils.MathUtil.CompareFloat(System.Single,System.Single)">
            <summary>
            浮点数比较(忽略误差) 精度0.000001f
            </summary>
        </member>
        <member name="M:EF.Utils.MathUtil.CeilToInt(System.Single)">
            <summary>
            向上取整(忽略误差) 精度0.000001f
            </summary>
        </member>
        <member name="M:EF.Utils.MathUtil.FloorToInt(System.Single)">
            <summary>
            向下取整(忽略误差) 精度0.000001f
            </summary>
        </member>
        <member name="M:EF.Utils.MathUtil.SupplementZero(System.Int32)">
            <summary>
            整型转字符串 小于10 十位补"0"
            </summary>
        </member>
        <member name="M:EF.Utils.MathUtil.Bezier(UnityEngine.Vector3[],System.Single)">
            <summary>
            贝塞尔曲线
            </summary>
        </member>
        <member name="T:EF.Utils.TimerUtil">
            <summary>
            定时器事件类
            </summary>
        </member>
        <member name="M:EF.Utils.TimerUtil.AddEvent(System.String,System.Single,System.Int32,System.Single,EF.Event.Callback)">
            <summary>
            添加一个无参的定时器事件，runTimes = -1 时为无数次
            </summary>
            <param name="eventName"></param>
            <param name="delay"></param>
            <param name="runTimes"></param>
            <param name="interval"></param>
            <param name="callback"></param>
        </member>
        <member name="M:EF.Utils.TimerUtil.AddEvent(System.String,System.Single,System.Int32,System.Single,EF.Event.Callback{System.Object[]},System.Object[])">
            <summary>
            添加一个有参的定时器事件，runTimes = -1 时为无数次
            </summary>
            <param name="name"></param>
            <param name="delay"></param>
            <param name="runTimes"></param>
            <param name="interval"></param>
            <param name="callback"></param>
        </member>
        <member name="M:EF.Utils.TimerUtil.ContainsEvent(System.String)">
            <summary>
            是否包含定时器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Utils.TimerUtil.RemoveEvent(System.String)">
            <summary>
            根据名称 移除定时器
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:EF.Utils.TimerUtil.RemoveEvent(EF.Event.BoolDelegate{System.String})">
            <summary>
            根据注入条件 移除定时器
            </summary>
            <param name="condition">注入条件 ture则移除</param>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.GetTimeSpanLocalTime">
            <summary>
            本地时间取linux 时间戳
            </summary>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.GetTimeStampTotalSecond(System.DateTime)">
            <summary>
            获取所给时间的时间戳 单位（秒数）
            </summary>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.GetTimeStampTotalMilliseconds(System.DateTime)">
            <summary>
            获取所给时间的时间戳 单位（毫秒数）
            </summary>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.TimeStampToDate(System.Double)">
            <summary>
            秒数转日期
            </summary>
            <param name="timeStamp">时间戳秒数</param>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.TimeStampToDateString(System.Double,System.String)">
            <summary>
            秒数转日期字符串
            </summary>
            <param name="timeStamp">时间戳秒数</param>
            <param name="format">格式化 "y:m:d"：年月日 "m:d h:m"：月日时分 "m:d"：月日 "m:s"：分秒 </param>
            <returns> 日期字符串 </returns>
        </member>
        <member name="M:EF.Utils.TimeStampUtil.SecondsToString(System.Int32)">
            <summary>
            秒数转为时分秒 ‘00:00:00’
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:EF.Version.ResUpdate.Initialize">
            <summary>
            检查客户端是否可用->检查持久化目录是否有文件->无，则复制首包文件->热更新
            </summary>
        </member>
        <member name="M:EF.Version.ResUpdate.DownloadNewFiles(System.Int32,EF.Event.Callback)">
            <summary>
            下载热更新文件
            </summary>
            <param name="module">模块号</param>
            <param name="onFinished">完成回调</param>
        </member>
        <member name="M:EF.Version.ResUpdate.DeleteObsoleteFiles">
            <summary>
            删除本地无效文件
            </summary>
        </member>
        <member name="M:EF.Version.ResUpdate.GetRemoteVersion(EF.Event.Callback{EF.Version.ResVersion})">
            <summary>
            加载远程版本信息文件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:EF.Version.ResUpdate.CopyData(EF.Event.Callback,EF.Event.Callback)">
            <summary>
            复制文件WWW方式(三平台通用) 拷贝成功则更新 失败则下载全资源包
            </summary>
        </member>
        <member name="M:EF.Version.ResUpdate.ClientEnable">
            <summary>
            检查客户端版本是否过期
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameObjectExtension">
            <summary>
            GameObject's Util/This Extension
            </summary>
        </member>
        <member name="T:RefCounter">
            <summary>
            引用计数
            </summary>
        </member>
        <member name="M:ObjectCache.GetObject(System.String)">
            <summary>
            取Object缓存 并增加引用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:UISetting.id">
            <summary>
            编号
            </summary>
        </member>
        <member name="F:UISetting.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:UISetting.layer">
            <summary>
            0基础层 1引导层 2弹出框
            </summary>
        </member>
    </members>
</doc>
